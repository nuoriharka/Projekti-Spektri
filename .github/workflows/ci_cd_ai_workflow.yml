name: Ultimate Advanced CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
  schedule:
    - cron: '0 0 * * 0'  # Weekly schedule
    - cron: '0 0 1 * *'  # Monthly updates

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate secrets
        run: |
          REQUIRED_SECRETS=("CODACY_PROJECT_TOKEN" "EMAIL_FALLBACK_URL" "OPENAI_API_KEY" "PAGERDUTY_KEY" "SLACK_WEBHOOK" "VERCEL_TOKEN" "GITHUB_TOKEN" "EMAIL_USERNAME" "EMAIL_PASSWORD" "EMAIL_RECIPIENT")
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${{ secrets[${secret}] }}" ]; then
              echo "::error::$secret is not set"
              exit 1
            fi
          done

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run Linter
        run: npm run lint

      - name: Run Unit Tests
        run: npm test

      - name: Generate Documentation
        run: npm run docs:generate

      - name: Run Codacy Analysis
        uses: codacy/codacy-analysis-cli-action@v3
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test

      - name: Run tests and collect coverage
        run: |
          npm test -- --coverage
          bash <(curl -s https://codecov.io/bash)
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Migrate database
        run: npm run migrate

      - name: Build frontend
        run: npm run build

      - name: Run e2e Tests
        uses: cypress-io/github-action@v2
        with:
          build: npm run build
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20.0.0
        with:
          vercel_token: ${{ secrets.VERCEL_TOKEN }}
          vercel_org_id: ${{ secrets.VERCEL_ORG_ID }}
          vercel_project_id: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Notify on Slack
        uses: rtCamp/action-slack-notify@v2.0.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_ICON: https://slack.com/img/icons/app-57.png
          SLACK_TITLE: GitHub Actions
          SLACK_MESSAGE: Build ${{ github.run_number }} for ${{ github.repository }} on ${{ github.ref }} is complete!
          SLACK_COLOR: good
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Trigger PagerDuty Incident
        if: failure()
        uses: jksingh/pagerduty-action@v1.0.0
        with:
          api_key: ${{ secrets.PAGERDUTY_KEY }}
          incident_title: "Build Failure Alert"

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.example.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: GitHub Actions - Workflow Status
          body: The workflow for ${{ github.repository }} has completed.
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: GitHub Actions <actions@example.com>

      - name: Set up Grafana for monitoring
        run: |
          echo "Setting up Grafana dashboards for real-time monitoring..."
          # Placeholder for Grafana setup script or API integration

      - name: Publish metrics to Grafana
        run: |
          echo "Publishing metrics to Grafana..."
          # Placeholder for script to publish metrics to Grafana

      - name: Notify on successful setup
        uses: rtCamp/action-slack-notify@v2.0.0
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_TITLE: "Grafana Setup"
          SLACK_MESSAGE: "Grafana dashboard setup for monitoring completed successfully!"
          SLACK_COLOR: good
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}


