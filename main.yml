name: Advanced CI/CD Workflow with Full AI Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Run Static Code Analysis
        run: npx eslint .

      - name: Run Codacy Analysis
        uses: codacy/codacy-analysis-cli-action@v4
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: Run Unit Tests
        run: npm test

      - name: Run Security Scan
        uses: aquasecurity/trivy-action@v0.30.0

      - name: Build project
        run: npm run build

  e2e_tests:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run E2E tests
        run: npx cypress run

  deploy:
    runs-on: ubuntu-latest
    needs: [build, e2e_tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v21
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  notify_failure:
    runs-on: ubuntu-latest
    if: failure()
    needs: [build, e2e_tests]

    steps:
      - name: Send notification on failure
        uses: Ilshidur/action-slack@v2
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK }}
          msg: "Build or test failed for ${{ github.repository }} on branch ${{ github.ref }}"

  analyze_results:
    runs-on: ubuntu-latest
    if: failure() || success()
    needs: [build, e2e_tests]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Analyze Test Results with ChatGPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/analyze_results_chatgpt.py

      - name: AI-based Code Review and Suggestions with ChatGPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/ai_code_review_chatgpt.py



